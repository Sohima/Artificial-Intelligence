# -*- coding: utf-8 -*-
"""EightQueenProblem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZQPAkbeUlVt3BFtWKEp30Tl4lUkpSNV-

# Genetic Algorithm
As we use machine learning for making better and faster decisions, one can use artificial intelligence method called 'Genetic Algorithm' for optimizing the results further by letting algorithm evolve as it goes through iterations. Basic premise is that you start with set of possible solutions (randomly generated and mostly unfit for the problem) and rank them on fitness score for the given problem. Then you pick the 2 Top solutions (often referred as parent) that have high fitness score and then create another solution (referred as child) which takes best of features from both parents. This is done using cross over and mutation operations. The crossover operation involves swapping random parts of selected pairs (parents) to produce new and different offspring that become part of the new generation of solutions. Mutation involves substitution of some random part of a solution with some other random part of a solution. Finally, the child solution is added to the stack of solution and again, the solutions are ranked for fitness. This process is done again and again via many iterations till we reach a solution which is far superior than what we started with. Multiple runs (dozens to hundreds) are usually necessary to produce a very good result.

# **8 Queens problem**
There are many applications where Genetic Algorithm can be used especially where one does not know the exact solution and how to find it. One such problem is '8 Queens' puzzle. The objective here is to place 8 queens on a Chess board of dimension 8x8 such that they donâ€™t threaten each other i.e. no 2 queens share the same row, column and diagonal. There are only 92 solutions which meet the criteria out of 16,777,216 possible combinations.
"""

import random
import numpy as np
from numpy.random import choice
import pandas as pd

"""The n queens puzzle."""
class NQueens:
    """Generate all valid solutions for the n queens puzzle"""
    def __init__(self, size):
        # Store the puzzle (problem) size and the number of valid solutions
        self.size = size
        self.solutions = 0
        self.solve()

    def solve(self):
        """Solve the n queens puzzle and print the number of solutions"""
        positions = [-1] * self.size
        self.put_queen(positions, 0)
        print("Found", self.solutions, "solutions.")

    def put_queen(self, positions, target_row):
        """
        Try to place a queen on target_row by checking all N possible cases.
        If a valid place is found the function calls itself trying to place a queen
        on the next row until all N queens are placed on the NxN board.
        """
        # Base (stop) case - all N rows are occupied
        if target_row == self.size:
            self.show_full_board(positions)
            # self.show_short_board(positions)
            self.solutions += 1
        else:
            # For all N columns positions try to place a queen
            for column in range(self.size):
                # Reject all invalid positions
                if self.check_place(positions, target_row, column):
                    positions[target_row] = column
                    self.put_queen(positions, target_row + 1)


    def check_place(self, positions, ocuppied_rows, column):
        """
        Check if a given position is under attack from any of
        the previously placed queens (check column and diagonal positions)
        """
        for i in range(ocuppied_rows):
            if positions[i] == column or \
                positions[i] - i == column - ocuppied_rows or \
                positions[i] + i == column + ocuppied_rows:

                return False
        return True

    def show_full_board(self, positions):
        """Show the full NxN board"""
        for row in range(self.size):
            line = ""
            for column in range(self.size):
                if positions[row] == column:
                    line += "Q "
                else:
                    line += ". "
            print(line)
        print("\n")

    def show_short_board(self, positions):
        """
        Show the queens positions on the board in compressed form,
        each number represent the occupied column position in the corresponding row.
        """
        line = ""
        for i in range(self.size):
            line += str(positions[i]) + " "
        print(line)

def main():
    """Initialize and solve the n queens puzzle"""
    NQueens(8)

if __name__ == "__main__":
    # execute only if run as a script
    main()